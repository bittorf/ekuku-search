#!/bin/sh
#
# explode
# log()
# check_code()
# debug_activated()
# round_to_integer()
# is_number()
# json_keyvalue()
# date_get_oldest()
# mimetype_get()
# sha256_get()


alias explode='set -f;set +f --'	# TODO: is this really portable?

log()
{
	local message="$1"
	local prio="$2"		# e.g. debug or <empty>

	test -z "$DEBUG" -a "$prio" = debug && return
	>&2 printf '%s\n' "$( LC_ALL=C date ) | $0: $message"
}

check_code()	# deps: ctags, codespell, head, file
{
	local file temp line

	temp="$( mktemp )" || return 1

	# print all files into one large:
	for file in "$0" $( function_files_get ); do {
		log "[OK] building all-in-one: $file"
		codespell "$file" || { log "[HINT] codespell '$file' failed with rc:$?"; return 1; }

		if head -n1 "$file" | grep -q ^'#!'; then
			if test -x "$file"; then
				cat "$file" && echo
			else
				log "[ERROR] please mark it executable, e.g.:"
				log "        chmod +x '$file'"
				log "   and: git update-index --chmod=+x '$file'"
				return 1
			fi
		else
			log "[OK] ignoring non-shell-script: $file"
		fi
	} done >"$temp"

	# https://github.com/koalaman/shellcheck/issues/2126
	ctags --sort=no --language-force=sh -x "$temp" | \
	while read -r line; do {
		# e.g.: loop1_fastscan   function     82 ./rexxbot4.sh    loop1_fastscan()
		# shellcheck disable=SC2086
		set -- $line

		case "$2" in
			function)
				# search for 'name' but not 'name()'
				if grep -q "$1[^(]\|${1}$" "$temp"; then
					# echo "[OK] function used: $1"
					:
				else
					echo "# function '$1' unused?"
				fi
			;;
		esac
	} done

	shellcheck --shell=dash "$temp"
	rm -f "$temp"
}

debug_activated()
{
	case "$DEBUG" in '') false ;; *) true ;; esac
}

round_to_integer()	# e.g. 3.5 -> 4 or 3.4 -> 3
{
	LC_ALL=C printf '%0.f' "$1"
}

is_number()	# for N in -12 -12.33 -.33 12.33 .33 12345; do echo "A: $(is_number "$N"; echo $?)"; done
{
	local input="$1"

	case "$input" in
		''|*[!0-9.-]*)
			return 1
		;;
	esac

	case "$input" in
		'--'*) return 1 ;;
		'-'*) ;;
		*'-'*) return 1 ;;
	esac

	case "$input" in
		*'.'*'.'*) return 1 ;;
	esac

	case "$input" in
		*[a-zA-Z]*|*'[ <>]'*) false ;;
		*)
			case "$input" in
				-[0-9]) ;;		# -1
				-[0-9][0-9]*) ;;	# -12
				-[0-9]*.[0-9]*) ;;	# -12.33
				-.[0-9]*) ;;		# -.33
				 [0-9]*.[0-9]*) ;;	# 12.33
				 .[0-9]*) ;;		# .33
				 [0-9]*) ;;		# 12345
				*) false ;;
			esac
		;;
	esac
}

json_linebreaks()	# deps: sed, tr
{
	local text="$1"

	# linebreaks to literal '\\'
	# we remove all backslashes, otherwise it can lead to invalides e.g. \\\

	# see:
	# https://cygwin.com/pipermail/cygwin/2018-December/239487.html

	# test:
	# son_linebreaks "$( printf '%s\n%s\n' line1 line2 )"

	printf '%s\n' "$text" | tr -d \\\\ | sed ':a;N;$!ba;s/\n/\\\\/g'
}

			# deps: sed
json_keyvalue()		# we omit/autoignore 'null' values
{
	local key="$1"
	local value="$2"
	local option="$3"
	local optarg="$4"
	local comma=','
	local linebreak="
"
	case "$option" in
		'last') comma= ;;	# important: dont ignore, even when <empty> / null
		'ignore')
			case  "$optarg" in "$value") return 0 ;; esac
			case -"$optarg" in "$value") return 0 ;; esac
		;;
	esac

	case "$value" in
		'') case "$option" in last) ;; *) debug_activated || return 0 ;; esac
	esac

	if is_number "$value"; then
		case "$value" in
			.*) value="0$value" ;;		# .9 -> 0.9
		esac

		# e.g. "key": value,
		printf '%s\n' "  \"$key\": ${value:-null}${comma}"
	else
		case "$value" in
			*"$linebreak"*) value="$( json_linebreaks "$value" )" ;;
		esac

		# e.g. "key": "value with\" inside"
		case "$value" in
			*'"'*) value="$( printf '%s\n' "$value" | sed 's/"/\\"/g' )" ;;
		esac

		# e.g. "key": "value",
		printf '%s\n' "  \"$key\": ${value:+\"}${value:-null}${value:+\"}${comma}"
	fi
}

date_get_oldest()		# deps: date, test
{
	local date unix y m rest
	local unix_min=2147483647	# 2^32-1

	for date in "$@"; do {				# e.g. 2017:03:23 12:41:46
		case "$date" in				#      2019-03-01T12:31:02+00:00
			[1-9][0-9][0-9][0-9]:*)
				# e.g. 2017:03:23 12:41:46
				y="${date%%:*}"		# 2017
				rest="${date#*:}"	# 03:23 12:41:46
				m="${rest%%:*}"		# 03
				rest="${rest#???}"	# 23 12:41:46
				date="$y-$m-$rest"
			;;
		esac

		unix="$( date --date "$date" +%s )" || continue
		test "$unix" -lt "$unix_min" && unix_min="$unix"
	} done

	printf '%s\n' "$unix_min"
}

mimetype_get()	# deps: file
{
	local file="$1"

	# e.g. application/vnd.openxmlformats-officedocument.wordprocessingml.document
	# e.g. image/jpeg
	# e.g. audio/x-wav
	# e.g. video/x-m4v

	# https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types	
	file --mime-type --brief "$file"
}

sha256_get()	# deps: sha256sum, cut
{
	local file="$1"

	sha256sum <"$file" | cut -d' ' -f1
}
