overall design:
===============

prototyp1:
- laeuft nur als user
  - versprechen das nix geschrieben, nur gelesen wird
  - autoupdate per arg/switch
- find ueber $DIR_LIST
  - dateiname, groesse und aenderungsdatum file/dir
  - muss auch mit komischen namen funktionieren -> printf0
    - touch somefile.txt
    - mv somefile.txt "$(printf "otto-foo\nbar")"
  - find "$dir" -printf '{\n\tpath: %h\n\tname: %f\n\tsize: %s\n\tctime: %C@\n\ttype: %y\n}\n'
  - find /home/bastian/wetter -printf '%h\n%f\n%s\n%C@\n%y\n' | wc -c 
- nur POSIX verwenden / OpenWrt! -> ohne printf?
  - detect/ignore hardlinks: http://superuser.com/questions/12972/how-can-you-see-the-actual-hard-link-by-ls

-
- ergebnis hashen
- wenn aenderung mit letzten hash, dann in DB pumpen
  - wie? datenbankfelder?
    - typ: file/dir
    - size
    - name
    - referenz auf pfad?
    - hash
    - time last change
    - type (mime? video? gfx?)
    - subtype (jpeg, mp4) -> ueber module (inkl. metadaten?)

idee:
- in archive tauchen, wenn archiv-hash sich geaendert hat
- archiv: zip, tar, rar, binwalk
- vorsichtig beim entpacken sein wegen bombs (dynamisches begrenzen auf 20fache archivgroesse?)
  - subtype -> 'archiv-bomb'
- datei/dir erhaelt ein herkunftsfeld mit verweis auf archiv-datei?
  - archiv in archiv?

idee:
- pdf = archiv -> eintauchen
- odf = archiv

idee:
- audio-fingerprint
- video-fingerprint
  - bild/ton getrennt!
  - erkennung von (relativ!) helldunkel-zeitraeumen?
  - (+schnitte?)
    - gespiegelt waere der selbe fingerprint
- text_innerhalb_von_bildern
- sprache von texten erkennen
- audio2text

idee:
  - plaintext (e.g. pdf -> txt)
  - metadaten (codecs etc.)
  - ...
  - file-fingerprint?
  - time origin? (jpeg-exif -> wann geknipst, film erscheinungsjahr?, mp3..., dokument ...)
  - vergleiche zwei DB und zeige welche Dateien fehlen (um in sync zu sein)


# https://github.com/projectatomic/bubblewrap
# https://www.golem.de/news/imho-unnoetige-sicherheitsrisiken-mit-linux-1810-136892.html

# OCR:
# https://scanbotsdk.github.io/documentation/react-native/#module_ScanbotSDK.performOCR
# https://scanbot.io/en/sdk/info/insurance.html
# -> Tesseract -> v3.x -> deu.traineddata

# Tesseract
# https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-304305
